{
  "name": "chat-bubble",
  "type": "registry:ui",
  "dependencies": ["lucide-react"],
  "files": [
    {
      "path": "ui/chat-bubble.tsx",
      "content": "'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { MessageCircle, X, Send } from 'lucide-react'\n\nexport interface Message {\n  id: string\n  content: string\n  isUser: boolean\n}\n\ninterface ChatBubbleProps {\n  messages: Message[]\n  onSendMessage: (message: string) => void\n  isTyping?: boolean\n  chatIcon?: React.ReactNode\n  title?: string\n  placeholder?: string\n  sendButtonAriaLabel?: string\n  closeButtonAriaLabel?: string\n  isOpen?: boolean\n  onToggleOpen?: () => void\n  className?: string\n  themeColor?: string\n}\n\nexport function ChatBubble({\n  messages,\n  onSendMessage,\n  isTyping = false,\n  chatIcon = <MessageCircle className=\"h-6 w-6\" />,\n  title = \"Chat\",\n  placeholder = \"Type your message...\",\n  sendButtonAriaLabel = \"Send message\",\n  closeButtonAriaLabel = \"Close chat\",\n  isOpen: controlledIsOpen,\n  onToggleOpen,\n  className = \"\",\n  themeColor = \"bg-gradient-to-r from-blue-500 to-indigo-600\"\n}: ChatBubbleProps) {\n  const [isOpen, setIsOpen] = useState(false)\n  const [inputMessage, setInputMessage] = useState('')\n  const [isAnimating, setIsAnimating] = useState(false)\n  const scrollAreaRef = useRef<HTMLDivElement>(null)\n\n  const isControlled = controlledIsOpen !== undefined && onToggleOpen !== undefined\n  const showChat = isControlled ? controlledIsOpen : isOpen\n\n  const toggleChat = () => {\n    setIsAnimating(true)\n    if (isControlled) {\n      onToggleOpen()\n    } else {\n      setIsOpen(!isOpen)\n    }\n  }\n\n  useEffect(() => {\n    if (isAnimating) {\n      const timer = setTimeout(() => setIsAnimating(false), 300)\n      return () => clearTimeout(timer)\n    }\n  }, [isAnimating])\n\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight\n    }\n  }, [messages])\n\n  const handleSendMessage = () => {\n    if (inputMessage.trim() === '') return\n    onSendMessage(inputMessage)\n    setInputMessage('')\n  }\n\n  return (\n    <>\n      {(!showChat || isAnimating) && (\n        <button\n          className={`fixed bottom-4 right-4 z-50 rounded-full w-12 h-12 shadow-lg transition-all duration-300 ease-in-out ${themeColor} flex justify-center items-center hover:shadow-xl hover:scale-105 text-white\n            ${showChat ? 'opacity-0 scale-95' : 'opacity-100 scale-100'}`}\n          onClick={toggleChat}\n          aria-label=\"Open chat\"\n        >\n          {chatIcon}\n        </button>\n      )}\n      {(showChat || isAnimating) && (\n        <div \n          className={`fixed z-50 transition-all duration-300 ease-in-out\n            ${showChat ? 'opacity-100 scale-100' : 'opacity-0 scale-95'}\n            md:bottom-4 md:right-4 md:w-96 md:max-w-[calc(100vw-2rem)] shadow-2xl rounded-b-xl md:max-h-[calc(h-full-2rem)]\n            bottom-0 left-0 right-0 top-0 w-full h-full md:h-auto md:top-auto md:left-auto`}\n        >\n          <div \n            className={`flex flex-col h-full md:h-[36rem] bg-white dark:bg-gray-900 rounded-lg shadow-3xl backdrop-blur-sm bg-opacity-95 dark:bg-opacity-95 ${className}`}\n          >\n            <div className={`flex-shrink-0 flex flex-row items-center justify-between p-4 rounded-t-lg ${themeColor}`}>\n              <h2 className=\"text-xl font-bold text-white\">{title}</h2>\n              <button\n                className=\"p-2 rounded-full hover:bg-white/20 transition-colors text-white\"\n                onClick={toggleChat}\n                aria-label={closeButtonAriaLabel}\n              >\n                <X className=\"h-6 w-6\" />\n              </button>\n            </div>\n            <div className=\"flex-grow overflow-hidden py-4 px-2\">\n              <div \n                className=\"h-full overflow-y-auto pr-4 space-y-4 scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-700 scrollbar-track-transparent\" \n                ref={scrollAreaRef}\n                style={{ maxHeight: 'calc(100% - 2rem)' }}\n              >\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}\n                  >\n                    <span\n                      className={`inline-block p-3 rounded-2xl max-w-[80%] ${\n                        message.isUser\n                          ? `${themeColor} text-white shadow-md`\n                          : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100'\n                      }`}\n                    >\n                      {message.content}\n                    </span>\n                  </div>\n                ))}\n                {isTyping && (\n                  <div className=\"flex justify-start\">\n                    <span className=\"inline-block p-3 rounded-2xl bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100\">\n                      <div className=\"flex space-x-1\">\n                        <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce delay-100\"></div>\n                        <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce delay-200\"></div>\n                      </div>\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n            <div className=\"flex-shrink-0 p-2 border-t border-gray-200 dark:border-gray-800\">\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault()\n                  handleSendMessage()\n                }}\n                className=\"flex w-full space-x-2\"\n              >\n                <input\n                  type=\"text\"\n                  value={inputMessage}\n                  onChange={(e) => setInputMessage(e.target.value)}\n                  placeholder={placeholder}\n                  className=\"flex-grow px-4 py-2 rounded-lg bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:text-white transition-all\"\n                />\n                <button \n                  type=\"submit\" \n                  aria-label={sendButtonAriaLabel}\n                  className={`p-2 rounded-lg ${themeColor} text-white hover:shadow-lg hover:scale-105 transition-all duration-200`}\n                >\n                  <Send className=\"h-5 w-5\" />\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  )\n}",
      "type": "registry:ui",
      "target": "components/ui/chat-bubble.tsx"
    }
  ]
}